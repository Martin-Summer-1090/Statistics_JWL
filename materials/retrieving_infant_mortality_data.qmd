---
title: "retrieving_infant_mortality_data"
editor: visual
date: 20.9.2022
author: Martin Summer
---

We create a dataset about global infant mortality rates, combining the gapminder data set on infant mortality with the dataset displayed in "our world in data".

Load libraries:

```{r}
#| include: false
library(readxl)
library(tidyverse)
```

Read the gapminder data first, then read the data from our world in data:

```{r}
# The data are downloaded from
# https://www.gapminder.org/documentation/documentation/. Here
# we load the data from a local file repository in my project directory.

imr_gapminder <- read_excel("../data/infant_mortality/gapdata002.xlsx", sheet = 2, na = "")

# The data are downloaded from
# https://ourworldindata.org/grapher/infant-mortality/
# using the Full Data Pane

imr_owid <- read.csv("../data/infant_mortality/infant-mortality.csv")
names(imr_owid) <- c("Entity", "Code", "Year", "Mortality")
```

We first transform the gapminder data into a long format. We also express the mortality rate in percent; the probability that an infant dies during the first year after birth. Since the gapminder data are
expressed as mortality rate, number of infant deaths per 100 life births, we have to divide by 1000 to get
this probability.

```{r}

#| warnings: false

imr_gapminder_long <- imr_gapminder %>% 
                 as_tibble() %>% 
                 pivot_longer(!"Infant Mortality Rate", names_to = "Year", values_to = "Mortality",  
                              values_transform = list(Mortality = as.numeric)) %>% 
                 suppressWarnings()

names(imr_gapminder_long) <- c("Entity", "Year", "Mortality")

imr_gapminder_long$Year <- as.numeric(imr_gapminder_long$Year)
imr_gapminder_long$Mortality <- as.numeric(imr_gapminder_long$Mortality)/1000
```

Add ISO-3 country codes to the Gapminder data.

```{r}
iso <- read.csv("../data/infant_mortality/ISO.csv")
names(iso) <- c("Entity", "Code")
```

We join by entities in the iso-list:

```{r}
imr_gapminder_long_with_iso <- left_join(iso, imr_gapminder_long, by = "Entity")
```


Transform the owid-data from percent notation to death probabilities to be consistent with the
gapminder data:

```{r}
imr_owid$Mortality <- (imr_owid$Mortality)/100

imr_owid <- imr_owid[, c("Entity", "Code", "Year", "Mortality")] %>% as_tibble()
```

We would like to combine both datasets by taking the gapminder data until 1960 and then from then on
the owid data. 

```{r}
gapminder <- imr_gapminder_long_with_iso[imr_gapminder_long_with_iso$Year < 1961, ]
```

Now the problem is that owid and gapminder have different country lists. To see and check this:

```{r}
length(unique(gapminder$Entity))
length(unique(imr_owid$Entity))
```
What are the common countries?

```{r}
gapminder_countries <- unique(gapminder$Entity) %>% as_tibble() %>% na.omit()
owid_countries <- unique(imr_owid$Entity) %>% as_tibble()
common_countries <- intersect(unique(gapminder$Entity), unique(imr_owid$Entity)) %>% as_tibble()
names(common_countries) <- "Entity"
```

We select the same country list by joining both sets with the common country list

```{r}
data1 <- left_join(common_countries, gapminder, by = "Entity")
data2 <- left_join(common_countries, imr_owid, by = "Entity")
```

Check whether both lists are the same:

```{r}
identical(unique(data1$Entity), unique(data2$Entity))
```

Now we split bothe frames by country and then stitch together again
```{r}
comb1 <- split(data1, data1$Entity)
comb2 <- split(data2, data2$Entity)
```

```{r}
res <- Map(bind_rows, comb1, comb2)
```

```{r}
data <- do.call(rbind, res)
row.names(data) <- NULL
names(data) <- c("Country", "Code", "Year", "Mortality")
```


Add continent as a factor, add population

Define continents by country lists:

```{r}
library(stringr)
library(XML)
library(RCurl)

site_asia <- getURL("https://www.countryaah.com/asian-countries/")
tables_asia <- readHTMLTable(site_asia, stringsAsFactors = F, header = T)
asia <- as_tibble(tables_asia[[1]])
countries_asia <- asia[,3] %>% unlist() %>% unname()

site_europe <- getURL("https://www.countryaah.com/european-countries/")
tables_europe <- readHTMLTable(site_europe, stringsAsFactors = F, header = T)
europe <- as_tibble(tables_europe[[1]])
countries_europe <- europe[,3] %>% unlist() %>% unname()

site_africa <- getURL("https://www.countryaah.com/african-countries/")
tables_africa <- readHTMLTable(site_africa, stringsAsFactors = F, header = T)
africa <- as_tibble(tables_africa[[1]])
countries_africa <- africa[,3] %>% unlist() %>% unname()

site_northamerica <- getURL("https://www.countryaah.com/north-american-countries/")
tables_northamerica <- readHTMLTable(site_northamerica, stringsAsFactors = F, header = T)
northamerica <- as_tibble(tables_northamerica[[1]])
countries_northamerica <- northamerica[,3] %>% unlist() %>% unname()

site_southamerica <- getURL("https://www.countryaah.com/south-american-countries/")
tables_southamerica <- readHTMLTable(site_southamerica, stringsAsFactors = F, header = T)
southamerica <- as_tibble(tables_southamerica[[1]])
countries_southamerica <- southamerica[,3] %>% unlist() %>% unname()

site_oceania <- getURL("https://www.countryaah.com/oceania-countries/")
tables_oceania <- readHTMLTable(site_oceania, stringsAsFactors = F, header = T)
oceania <- as_tibble(tables_oceania[[1]])
countries_oceania <- oceania[,3] %>% unlist() %>% unname()
```

Check uniqueness of names:

```{r}
intersect(countries_europe, countries_asia)
```

```{r}
intersect(countries_northamerica, countries_southamerica)
```

Add continent names to mortality table:

```{r}
data$Continent <- 
  ifelse(data$Country %in% countries_europe, "Europe",
    ifelse(data$Country %in% countries_asia, "Asia",
      ifelse(data$Country %in% countries_africa, "Africa",     
        ifelse(data$Country %in% countries_northamerica, "North America",
          ifelse(data$Country %in% countries_southamerica, "South America",
            ifelse(data$Country %in% countries_oceania, "Oceania", ""))))))
```

Exclude entities not belonging to the list

```{r}
data_clean <- data[!(data$Continent == ""), ]
```

Matching population data:

```{r}
population_data <- read_csv("../data/infant_mortality/population-since-1800.csv")
names(population_data) <- c("Country", "Code", "Year", "Population")
```

Merge dataframes:

```{r}
infant_mortality <- 
  left_join(data_clean, population_data, by = c("Country", "Code","Year"))
```

Specify continent as factor:

```{r}
infant_mortality$Continent <- as.factor(infant_mortality$Continent)
```

Add birth and death counts:

```{r}
births <- read.csv("../data/infant_mortality/births-and-deaths-projected-to-2100.csv")
births <- births[ ,c(1,2,3,6)]
names(births) <- c("Country", "Code", "Year", "Births")
deaths <- read.csv("../data/infant_mortality/number-of-infant-deaths.csv")
names(deaths) <- c("Country", "Code", "Year", "Deaths")
```


```{r}
infant_mortality_b <- left_join(infant_mortality, births, by = c("Country", "Code", "Year"))
infant_mortality_data <- left_join(infant_mortality_b, deaths, by = c("Country", "Code", "Year"))
```



Write the final dataset as a RDS to data:

```{r}
saveRDS(infant_mortality_data, "../data/infant_mortality/infant_mortality_data.RDS")
```
