---
title: "retrieving_infant_mortality_data"
editor: visual
---

We create a dataset about global infant mortality rates, combining the gapminder data set
on infant mortality with the dataset displaye in our world in data.

Load libraries:

```{r}
#| include: false
library(readxl)
library(tidyverse)
```


Read the gapminder data first, then read the data from our world in data:

```{r}
imr_gapminder <- read_excel("../data/infant_mortality/gapdata002.xlsx", sheet = 2, na = "")
imr_owid <- read.csv("../data/infant_mortality/infant-mortality.csv")
```

We first transform the gapminder data into a long format.

```{r}

#| warnings: false

imr_gapminder_long <- imr_gapminder %>% 
                 as_tibble() %>% 
                 pivot_longer(!"Infant Mortality Rate", names_to = "Year", values_to = "Count",  
                              values_transform = list(Count = as.numeric)) %>% 
                 suppressWarnings()

names(imr_gapminder_long) <- c("Entity", "Year", "Count")

imr_gapminder_long$Mortality_Rate <- ifelse(is.na(imr_gapminder_long$Count), NA, imr_gapminder_long$Count/1000)

imr_gapminder_long$Year <- as.numeric(imr_gapminder_long$Year)
imr_gapminder_long$Count <- as.numeric(imr_gapminder_long$Count)
imr_gapminder_long$Mortality_Rate <- as.numeric(imr_gapminder_long$Mortality_Rate)
```

Check the country names:

```{r}
names_gm <- unique(imr_gapminder_long$Entity) %>% as_tibble()
names_owid <- unique(imr_owid$Entity) %>% as_tibble()
```

Names which are in both lists:

```{r}
common <- intersect(names_gm, names_owid) %>% as_tibble()
```

Names which are in gapminder but not in our world in data:

```{r}
not_common <- setdiff(names_gm, names_owid) %>% as_tibble()
```

It seems that the gapminder data contain more entities, some of them which do not exist anymore like East Germany or USSR.

Enrich the gapminder data by ISO-3 country codes

```{r}
iso <- read.csv("../data/infant_mortality/ISO.csv")
names(iso) <- c("Entity", "Code")
```

We join by entities in the iso-list:

```{r}
imr_gapminder_extended <- left_join(iso, imr_gapminder_long, by = "Entity")
```

Check whether the name list has length 178:

```{r}
length(unique(imr_gapminder_extended$Entity))
```

So there are more countries in gapminder than in owid.

Transform the owid-data from rates to counts and percentages to rates and reorder columns:

```{r}
imr_owid$Count <- (imr_owid$Mortality.rate..infant..per.1.000.live.births.)*10
imr_owid$Mortality.rate..infant..per.1.000.live.births. <- (imr_owid$Mortality.rate..infant..per.1.000.live.births.)/100
names(imr_owid) <- c("Entity", "Code", "Year", "Mortality_Rate", "Count")

imr_owid <- imr_owid[, c("Entity", "Code", "Year", "Count", "Mortality_Rate")] %>% as_tibble()
```

We need identical country lists. So we do a full join of the owid data with the gapminder data by Entity

```{r}
joint_data <- left_join(imr_owid, imr_gapminder_extended, by = c("Entity", "Code", "Year"))
```


How different are the two rates?

```{r}
plot(joint_data$Mortality_Rate.x, joint_data$Mortality_Rate.y)
```
There are discrepancies. We assume that the owid data are more accurate and combine pre 1960 years, where
we only have gapminder data with the owid data.

```{r}
data_new <- joint_data[, c("Entity", "Code", "Year", "Count.x", "Mortality_Rate.x")]
names(data_new) <- c("Entity", "Code", "Year", "Count", "Mortality_Rate")
```

Now the observations before 1961 we take them from the gapminder data: 

```{r}
data_old <- imr_gapminder_extended[imr_gapminder_extended$Year < 1961, ]
```

Now match the two datasets by Entities:

```{r}
data_matched <- left_join(data_new, data_old, by = "Entity")
```

```{r}
data1 <- data_matched[, c("Entity", "Code.x", "Year.x", "Count.x", "Mortality_Rate.x")]
data2 <- data_matched[, c("Entity", "Code.y", "Year.y", "Count.y", "Mortality_Rate.y")]
```

remove the duplicated rows in data 1:

```{r}
data1 <- data1[!duplicated(data1), ]
data2 <- data2[!duplicated(data2), ]
```

Rename

```{r}
names(data1) <- c("Country", "Code", "Year", "Count", "Mortality_Rate")
names(data2) <- c("Country", "Code", "Year", "Count", "Mortality_Rate")
```

Now we have to combine both datasets:

```{r}
comb1 <- split(data1, data1$Country)
comb2 <- split(data2, data2$Country)
```


```{r}
res <- Map(bind_rows, comb2, comb1)
```

```{r}
infant_mortality_data <- do.call(rbind, res)
row.names(infant_mortality_data) <- NULL
```

Add continent as a factor, add population

Define continents by country lists:

```{r}
library(stringr)
library(XML)
library(RCurl)

site_asia <- getURL("https://www.countryaah.com/asian-countries/")
tables_asia <- readHTMLTable(site_asia, stringsAsFactors = F, header = T)
asia <- as_tibble(tables_asia[[1]])
countries_asia <- asia[,3] %>% unlist() %>% unname()

site_europe <- getURL("https://www.countryaah.com/european-countries/")
tables_europe <- readHTMLTable(site_europe, stringsAsFactors = F, header = T)
europe <- as_tibble(tables_europe[[1]])
countries_europe <- europe[,3] %>% unlist() %>% unname()

site_africa <- getURL("https://www.countryaah.com/african-countries/")
tables_africa <- readHTMLTable(site_africa, stringsAsFactors = F, header = T)
africa <- as_tibble(tables_africa[[1]])
countries_africa <- africa[,3] %>% unlist() %>% unname()

site_northamerica <- getURL("https://www.countryaah.com/north-american-countries/")
tables_northamerica <- readHTMLTable(site_northamerica, stringsAsFactors = F, header = T)
northamerica <- as_tibble(tables_northamerica[[1]])
countries_northamerica <- northamerica[,3] %>% unlist() %>% unname()

site_southamerica <- getURL("https://www.countryaah.com/south-american-countries/")
tables_southamerica <- readHTMLTable(site_southamerica, stringsAsFactors = F, header = T)
southamerica <- as_tibble(tables_southamerica[[1]])
countries_southamerica <- southamerica[,3] %>% unlist() %>% unname()

site_oceania <- getURL("https://www.countryaah.com/oceania-countries/")
tables_oceania <- readHTMLTable(site_oceania, stringsAsFactors = F, header = T)
oceania <- as_tibble(tables_oceania[[1]])
countries_oceania <- oceania[,3] %>% unlist() %>% unname()
```

Check uniqueness of names:

```{r}
intersect(countries_europe, countries_asia)
```

```{r}
intersect(countries_northamerica, countries_southamerica)
```

Add continent names to mortality table:

```{r}
infant_mortality_data$Continent <- 
  ifelse(infant_mortality_data$Country %in% countries_europe, "Europe",
    ifelse(infant_mortality_data$Country %in% countries_asia, "Asia",
      ifelse(infant_mortality_data$Country %in% countries_africa, "Africa",     
        ifelse(infant_mortality_data$Country %in% countries_northamerica, "North America",
          ifelse(infant_mortality_data$Country %in% countries_southamerica, "South America",
            ifelse(infant_mortality_data$Country %in% countries_oceania, "Oceania", ""))))))
```

Exclude entities not belonging to the list

```{r}
infant_mortality_data_clean <- infant_mortality_data[!(infant_mortality_data$Continent == ""), ]
```

Matching population data:

```{r}
population_data <- read_csv("../data/infant_mortality/population-since-1800.csv")
names(population_data) <- c("Country", "Code", "Year", "Population")
```

Merge dataframes:

```{r}
infant_mortality <- 
  left_join(infant_mortality_data_clean, population_data, by = c("Country", "Code","Year"))
```

Specify continent as factor:

```{r}
infant_mortality$Continent <- as.factor(infant_mortality$Continent)
```

Write the final dataset as a csv file to tables:

```{r}
write.csv(infant_mortality, file = "../data/infant_mortality/infant_mortality_data.csv", row.names = FALSE)
```

