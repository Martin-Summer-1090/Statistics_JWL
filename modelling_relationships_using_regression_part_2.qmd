# Modelling relationship: Prediction using regression

We ended the last chapter with Pearson's historical data on the
heights of fathers and sons to introduce the concept of a scatter-plot.

```{r}

library(JWL)
dat <- pearson

plot(dat, 
     pch = 19, 
     cex = 0.3, 
     xlab = "Father's height (inches)", 
     ylab = "Son's height (inches)",
     main = "Pearson's height data from 1903")
abline(0,1, lty = 2)
```

We discussed how we could use the positive association in this scatter-plot to 
predict the height of a son from the height of the father. One intuition might be
to use the straight dashed line that runs along the diagonal. If we would use this
line as a model for prediction, each adult son would be predicted to show the same 
height as his father. But we can do better than that and improve on this choice.

For any straight line we might choose, each data-point will give rise to a **residual** which
is the size of the error were we to use the line as prediction.

```{r}
plot(dat, 
     pch = 19, 
     cex = 0.3, 
     xlab = "Father's height (inches)", 
     ylab = "Son's height (inches)",
     main = "Pearson's height data from 1903")
abline(0,1, lty = 2)
abline(reg = lm(dat$Son ~ dat$Father), col = "red", lwd = 2)
points(63.1, 74.3, pch = 19, col = "red")
lines(c(63.1, 63.1), c(66.3264, 74.3), col = "red", lty = 2)
```

Suppose for instance that we took the father with a height of 63.1 inches and predicted the height
of the son according to the model described by the red line, we would have predicted the son to
have height 66.3 inches. In the data the son of the father with height 63.1 inches is in fact 74.3
inches. This is marked out as the red point in the plot. The length of the dashed line from the
red point to the red line is the residual.

The idea of prediction using models of straight lines is to make these residuals small. We
will learn a method how to do this. This approach to prediction is called regression and we
will learn how it works in this chapter.

## Correlation

In the beginning of this lecture we studied the example of infant mortality. 
Let us first study a scatter plot which plots the number of children per woman
against the infant mortality rate across countries in the world in the year 2000.

```{r}
library(JWL)
dat <- infant_mortality_data

dat_2000 <- dat[dat$Year == 2000, ]

plot(dat_2000$Children, dat_2000$Mortality,
     yaxt = "n",
     xlab = "Children per woman",
     ylab = "Infant mortality",
     pch = 19,
     cex = 0.5)
axis(2, at=pretty(dat_2000$Mortality), lab=paste0(pretty(dat_2000$Mortality) * 100, " %"), las=TRUE)
```

Notice the positive association in the data. The scatter of points is sloping upwards,
indicating that a higher number of children per woman tends to go along with
a higher infant mortality rate.

Let's look at another example, where we plot the average years of schooling for 
women on the x-axis and child mortality^[Remember from the section on counts and categorical data that child mortality is the rate of children who die before their fifth birthday. Infant mortality in contrast is the rate of children dying before their first birthday.] on the y-axis. Here we see a negative correlation. Child mortality across countries in a given year, here the year 2020, tends to be negatively
associated with the average years of schooling of women. In such cases we speak of a
negative correlation.

```{r}
data <- child_mortality_average_schooling_of_women

data_2020 <- data[data$Year == 2020, ]

plot(data_2020$YEW15, data_2020$MR,
     xlab = "Average years of schooling for women",
     ylab = "Child mortality",
     pch = 19,
     cex = 0.5)
```

The **correlation coefficient** measures how tightly a scatterplot is clustered around
a straight line. The correlation coefficient is therefore 
called a measure of linear association. It is usually expressed shorthand as
**correlation** and often abbreviated by the letter $r$.

Here are some mathematical properties of correlation which we will observe
by simulation in a next step.

::: {.callout-important}
## Mathematical properties of correlation

1. The correlation coefficient $r$ is a number between -1 and +1.
2. $r$ measures the extend to which the scatter plot clusters around a straight line.
3. $r=1$ if the scatter plot is a straight line sloping upwards and $r = -1$ if the
   scatter plot is a straight line sloping downwards
:::

### The correlation coefficient

R has a built in function for computing the correlation coefficient. This function is
called `cor()` and takes the $x$ and the $y$ values of a scatter plot as arguments. So, for
example, take the data on children per woman and infant mortality.

We read the data from the `JWL`package and store them in an object which we call `dat`.

```{r}
#| code-fold: false

library(JWL)
dat <- infant_mortality_data

```

Let's check the variable names. 

```{r}
#| code-fold: false
names(dat)
```

We filter the data for the year 2000 and store these data in a new object called `dat_2000`

```{r}
#| code-fold: false

dat_2000 <- dat[dat$Year == 2000, ]
```

Now we compute the correlation between the average number of children per
woman `Children` and the child mortality rate `Mortality`, where each data-point
corresponds to a particular country around the world.

```{r}
#| code-fold: false

cor(dat_2000$Children, dat_2000$Mortality)
```

indicating a strong positive correlation. 

Now let us use a function, which I have written myself using R which I call
`r_scatter`. This function takes the correlation coefficient as an argument and
produces a scatter plot. We have already learned in chapter 4 how we can write
our own R functions, but let us not go into the details of the
`r_scatter`function for now.

```{r}
r_scatter <- function(r, n = 1000){
  
  x <- rnorm(n)
  z <- rnorm(n)
  y <- r*x + sqrt(1-r^2)*z
  
  plot(x,y,
     xlab = "x",
     ylab = "y",
     main = paste(c("Correlation coefficient is", r), collapse = " "),
     pch = 19,
     cex = 0.5)
  
}
```

Now we call `r_scatter` a few times to see what the correlation coefficient does.

```{r}
#| code-fold: false

r_scatter(0.9)
```

```{r}
#| code-fold: false

r_scatter(0.25)
```

```{r}
#| code-fold: false

r_scatter(0)
```

```{r}
#| code-fold: false

r_scatter( -0.7)
```

```{r}
#| code-fold: false

r_scatter(- 0.98)
```

### Computing r